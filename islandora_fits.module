<?php

/**
 * @file
 * The main fits module file. Contains most of the hook implementations.
 *
 * @todo Add uninstall hook to delete our the variables we set.
 */

/**
 * Implements hook_menu().
 */
function islandora_fits_menu() {
  $items = array();
  $items['admin/islandora/fits'] = array(
    'title' => 'FITS Tool',
    'description' => 'Configure the Islandora FITS extractor.',
    'page callback' => 'drupal_get_form',
    'access arguments' => array('administer site configuration'),
    'page arguments' => array('islandora_fits_admin_form'),
    'file' => 'includes/admin.form.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['islandora/object/%islandora_object/manage/fits_metadata'] = array(
    'title' => 'Technical Metadata',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'islandora_fits_metadata_display',
    'page arguments' => array(2),
    'access callback' => 'islandora_fits_metadata_access',
    'access arguments' => array(2),
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function islandora_fits_permission() {
  return array(
    'view technical metadata' => array(
      'title' => 'View technical metadata',
    ),
  );
}

/**
 * Implements hook_theme().
 */
function islandora_fits_theme() {
  return array(
    'islandora_fits_metadata_display' => array(
      'template' => 'theme/islandora-fits-metadata',
      'variables' => array('islandora_object' => NULL, 'islandora_fits_table' => NULL),
    ),
  );
}

/**
 * Implements hook_islandora_derivative().
 */
function islandora_fits_islandora_derivative() {
  return array(
    array(
      'source_dsid' => 'OBJ',
      'destination_dsid' => 'TECHMD',
      'weight' => '0',
      'function' => array(
        'islandora_fits_create_techmd',
      ),
      'file' => drupal_get_path('module', 'islandora_fits') . '/includes/derivatives.inc',
    ),
  );
}

/**
 * Access callback for the FITS metadata display.
 */
function islandora_fits_metadata_access($object) {
  if ($object[variable_get('islandora_fits_techmd_dsid', 'TECHMD')] && user_access('view technical metadata')) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Preprocess function that processes the TECHMD datastream and for output.
 */
function template_preprocess_islandora_fits_metadata_display(array &$variables) {
  $object = $variables['islandora_object'];
  $techmd_ds = $object[variable_get('islandora_fits_techmd_dsid', 'TECHMD')]->content;
  $xml = new SimpleXMLElement($techmd_ds);
  $fits_metadata = islandora_fits_child_xpath($xml);

  $headers = array(
    'label' => t('Field'),
    'value' => t('Value'),
  );
  foreach ($fits_metadata as $tool_name => $vals_array) {
    $variables['islandora_fits_data'][$tool_name] = array();
    $rows =& $variables['islandora_fits_data'][$tool_name];
    foreach ($vals_array as $field => $val_array) {
      if (!array_key_exists($field, $rows)) {
        $rows[$field] = array(
          array('data' => check_plain($field), 'class' => 'islandora_fits_table_labels'),
        );
        foreach ($val_array as $value) {
          if (!isset($rows[$field]['value'])) {
            $rows[$field]['value'] = array('data' => check_plain($value), 'class' => 'islandora_fits_table_values');
          }
          else {
            $rows[$field]['value'] = array('data' => $rows[$field]['value']['data'] .= '<br />' . check_plain($value), 'class' => 'islandora_fits_table_values');
          }
        }
      }
      $table_attributes = array('class' => array('islandora_fits_table'));

      $table = array(
        'header' => $headers,
        'rows' => $rows,
        'attributes' => $table_attributes,
      );
      $variables['islandora_fits_table'][$tool_name] = $table;
      $variables['islandora_fits_fieldsets'][$tool_name] = array(
        '#type' => 'fieldset',
        '#title' => $tool_name,
        '#collapsed' => TRUE,
        'table' => array(
          '#markup' => theme('table', $table),
        ),
      );
    }
  }
}

/**
 * Menu callback function.
 *
 * @param IslandoraObject $object
 *   The islandora object to display the metadata for.
 *
 * @return string
 *   The marked up output for display in Drupal.
 */
function islandora_fits_metadata_display($object) {
  module_load_include('inc', 'islandora', 'includes/breadcrumb');
  drupal_set_breadcrumb(islandora_get_breadcrumbs($object));
  $output = theme('islandora_fits_metadata_display', array('islandora_object' => $object));
  return $output;
}

/**
 * Finds the the first set of children from the TECHMD datastream.
 *
 * One it has these it passes them off recursively.
 *
 * @param SimpleXMLElement $xml
 *   The SimpleXMLElement to parse.
 *
 * @return array
 *   An array containing key/value pairs of fields and data.
 */
function islandora_fits_child_xpath($xml) {
  $results = $xml->xpath('/*/*');
  $output = array();
  foreach ($results as $result) {
    islandora_fits_children($result, $output);
  }
  return $output;
}

/**
 * Finds children for fits module.
 *
 * Recursive function that searches continously until we a leaf
 * at which point we grab the node's text value and add to
 * the output array.
 *
 * @param SimpleXMLElement $child
 *   The current child that we are searching through.
 *
 * @param array $output
 *   An array containing key/value pairs of fields and data.
 */
function islandora_fits_children($child, &$output) {
  $grandchildren = $child->xpath('*/*');

  if (count($grandchildren) > 0) {
    foreach ($grandchildren as $grandchild) {
      islandora_fits_children($grandchild, $output);
    }
  }
  else {
    $text_results = $child->xpath('text()');
    $tool_name = FALSE;
    if ($text_results) {
      foreach ($text_results as $text) {
        foreach ($text->attributes() as $key => $value) {
          if ($key === 'toolname') {
            $tool_name = trim((string) $value);
          }
        }
        $output_text = trim((string) $text);
        if (!empty($output_text)) {
          $fits_out = islandora_fits_construct_output($child->getName(), $tool_name);
          $tool_label = $fits_out['tool'];
          $field_label = $fits_out['name'];
          // Need to check if the label already exists in our output
          // such that we do not duplicate entries.
          if ($tool_label) {
            if (isset($output[$tool_label])) {
              if (!array_key_exists($field_label, $output[$tool_label])) {
                $output[$tool_label][$field_label][] = $output_text;
              }
              else {
                foreach ($output[$tool_label][$field_label] as $key => $value) {
                  if ($value !== $output_text) {
                    $output[$tool_label][$field_label][] = $output_text;
                  }
                }
              }
            }
            else {
              $output[$tool_label][$field_label][] = $output_text;
            }
          }
          // No tool attribute.
          else {
            $output['Unknown'][$field_label][] = $output_text;
          }
        }
      }
    }
  }
}

/**
 * Builds display by parsing strings.
 *
 * @param string $node_name
 *   Name of the current node that we will display.
 * @param string $tool_name
 *   Name of the tool used to generate the metadata.
 *
 * @return string
 *   Constructed node name for output.
 */
function islandora_fits_construct_output($node_name, $tool_name) {
  // Construct an arbitrary string with all capitals in it.
  $capitals = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
  $name_array = str_split($node_name);
  $space_position = array();

  // Check to see which characters are capitals so we can split
  // them up for cleaner display.
  foreach ($name_array as $key => $value) {
    if (strpos($capitals, $value) !== FALSE && $key !== 0) {
      $space_position[] = $key;
    }
  }
  if (count($space_position)) {
    // Needed in event we add multiple spaces so need to keep track.
    $pos_offset = 0;
    foreach ($space_position as $pos) {
      $node_name = substr_replace($node_name, ' ', $pos + $pos_offset, 0);
      $pos_offset++;
    }
  }
  $node_name = ucwords($node_name);

  return array('name' => $node_name, 'tool' => ucwords($tool_name));
}
